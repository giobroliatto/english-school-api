/* ----------------------- */
/* ----- CURSO 1 ORM ----- */
/* ----------------------- */

/* ----- MYSQL ----- */

/* conectando-se ao mysql */

local do mysql -> cd /mnt/d/Arquivos\ de\ Programas/xampp/mysql/bin/

iniciar o serviço do mysql -> sudo service mysql start

inicializar o mysql -> sudo mysql -u root -p

/* comandos dentro do mysql */

criando usuário -> CREATE USER 'super'@'localhost' IDENTIFIED BY 'super';

dando autorização total ao usuário -> GRANT ALL PRIVILEGES ON *.* TO 'super'@'localhost' WITH GRANT OPTION; (https://cursos.alura.com.br/forum/topico-access-denied-for-user-root-localhost-using-password-no-228967)

show databases; -> lista os dbs
use escola_ingles; -> seleciona um banco para utilizar
show tables; -> lista tabelas
describe Pessoas; -> detalha uma tabela específica
(obs: insert into a seguir não é eficiente [criar um registro por vez manualmente via terminal mysql]. pra isso existe um comando no sequelize-cli seed:generate)
insert into Pessoas (nome, ativo, email, role, createdAt, updatedAt) value ("Gio Broliatto", 1, "giovanibroliatto@gmail.com", "estudante", NOW(), NOW());
select * from Pessoas; -> mostrar todos dados da tabela

/* ----- SEQUELIZE-CLI ----- */

criar um modelo de tabela (será criado arquivo em models) -> npx sequelize-cli model:create --name Pessoas --attributes nome:string,ativo:boolean,email:string,role:string

IMPORTANTE: para realizar o vínculo de tabelas com as FKs, é preciso digitar o código direto nos modelos (na função .associate), e isso precisa ser feito antes de realizar a migração (https://sequelize.org/master/manual/assocs.html#options-2)

realizar migração, que é basicamente um "versionamento" do banco, controlar e rastrear as alterações realizadas (será criado arquivo em migrations) -> npx sequelize-cli db:migrate (foi necessário criar um novo usuário que chamei de super)

criar uma seed para alimentar a tabela de forma mais eficaz (será criado arquivo em seeders) -> npx sequelize-cli seed:generate --name demo-pessoa

alimentar as tabelas com a seed criada -> npx sequelize-cli db:seed:all

desfazer a última migração/seed feita -> npx sequelize-cli db:migrate/seed:undo

desfazer migração/seed específica -> db:migrate/seed:undo --name [data-hora]-create-[nome-da-tabela].js

/* ----------------------- */
/* ----- CURSO 2 ORM ----- */
/* ----------------------- */

foram criados requisitos para serem implementados no CRUD. a seguir, cada um deles com a descrição do que foi feito

1 - O cliente não gostaria que registros importantes do sistema, como as Pessoas, sejam apagados definitivamente do banco de dados.
RES: adicionado ao model de cada uma das tabelas a propriedade "paranoid: true", dessa forma os registros aparecem deletados para o cliente, mas ficam apenas com uma flag no sistema de quando foi deletado. para isso, será preciso criar uma nova coluna nas tabelas (chamada deletedAt), que serão usadas como flag pelo mysql no momento do delete.
isso pode ser feito através do console do mysql com os comandos:
- alter table Pessoas;
- add column deletedAt datetime after updatedAt;
porém, para facilitar, é possível fazer isso através das migrations, que pode desfazer comandos realizados caso venha a ocorrer algum problema.
então, cria-se um novo arquivo de migrations com a data atual (20221214223050-addcolumn-pessoas.js). o código é muito semelhante ao createTable, altera-se o método "createTable" em "up" pra "addColumn", e passa-se um segundo parâmetro com o nome da coluna a ser criada e o terceiro parâmetro um objeto com as propriedades desta coluna.
em "down", altera-se pra "removeColumn" e adiciona-se o segundo parâmetro com o nome da coluna.
replica-se isso tudo pras outras tabela e roda o comando de migração "npx sequelize-cli db:migrate".
após remover, o mysql trará apenas os registros que estejam com o deletedAt = NULL.
é preciso ser possível restaurar pessoas deletadas, pra isso foi criada a rota e o método de restauração.

2 - Para deixar a interface mais limpa, o cliente gostaria que na lista de Pessoas, por padrão, fossem exibidos somente os usuários ativos.
RES: para isso, serão usados Escopos (Scopes) do Sequelize. o escopo é como chamamos as regras que definem quão acessível ou “visível” uma informação (por exemplo, uma variável) está, dependendo da parte da aplicação. um escopo pode ter identificadores, alguma instrução de código ou algoritmo. isso será feito no mesmo local onde foi adicionado o paranoid, incluindo "defaultScope", que terá como valor um objeto onde serão passadas as condições do escopo. nesse caso, apenas os que tiverem a propriedade "ativo" como true.
para definir outros escopos, que não seja o padrão, basta incluir a propriedade "scopes" no model desejado e ali dentro criar quantos escopos quiser, criando dentro do objeto o nome do escopo e passando pra esse outro objeto criado as especificações do escopo. pra usá-lo, é só chamar .scope dentro do controller na hora de acessar o banco.

3 - Foram percebidas algumas falhas de validação dos formulários por parte do front-end, o que resultou em dados de email inválidos no banco. É desejável que essa validação não seja responsabilidade exclusiva do front.
RES: no Sequelize, isso pode ser feito usando validations & constraints (https://sequelize.org/docs/v6/core-concepts/validations-and-constraints/). isso é feito novamente no model, adicionando o validador "isEmail", mas não é dentro do objeto de opções como foi feito com o paranoid e com os escopos. isso é feito direto no atributo.

4 - É importante poder consultar todas as matrículas confirmadas referentes a estudante X de forma rápida.
RES: aqui podemos usar os escopos de associação, que são parecidos com os escopos de modelo usados nos 2 requisitos anteriores, mas não será definido no ".define", será definido no ".associate"

5 - O cliente gostaria de poder consultar as turmas abertas por intervalo de data, para não receber informações desnecessárias (como turmas antigas).
RES: criado o filtro dentro do controller de turma

6 - O cliente quer poder consultar as matrículas por turma e saber quais delas estão lotadas, para organizar melhor as matrículas.
RES: utilizado o método "findAndCountAll()" no controller de pessoas, que é onde estão os controles de matrículas, pode-se retornar as matrículas por turma e, em um novo método, utilizando um where dentro do "findAndCountAll()", é possível retornar as turmas lotadas.
obs: no caso de queries de SELECT, a ordem lógica é a seguinte:
FROM: pega as tabelas onde estão os dados
WHERE: filtra os dados
GROUP BY: agrega os dados
HAVING: filtra os dados agregados
SELECT: retorna os resultados
ORDER BY: ordena os resultados
LIMIT: limita a quantidade de resultados

7 - O cliente gostaria que, uma vez que o cadastro de um estudante fosse desativado, todas as matrículas relativas a este estudante automaticamente passassem a constar como “canceladas”.
RES: criado novo método POST no PessoasController que irá alterar a coluna "ativo" do aluno para false e o "status" da matrícula desse estudante para 'cancelado'